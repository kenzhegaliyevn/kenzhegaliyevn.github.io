{"version":3,"sources":["components/_firebase.config.js","components/auth/auth.js","components/login/login.js","components/home/home.js","components/PrivateRoute.js","app/App.js","serviceWorker.js","index.js"],"names":["base","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","AuthContext","React","createContext","AuthProvider","children","console","log","useState","currentUser","setCurrentUser","pending","setPenging","useEffect","auth","onAuthStateChanged","user","Provider","value","uiConfig","signInFlow","signInOptions","GoogleAuthProvider","PROVIDER_ID","callbacks","signInSuccess","withRouter","useContext","to","firebaseAuth","Home","onClick","signOut","PrivateRoute","RouteComponent","component","rest","render","routeProps","App","exact","path","Login","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6PAceA,G,MAXFC,gBAAuB,CAClCC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,kBCRJC,EAAcC,IAAMC,gBAEpBC,EAAe,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAC5BC,QAAQC,IAAIF,GAD8B,MAEJG,mBAAS,MAFL,mBAEnCC,EAFmC,KAEtBC,EAFsB,OAGZF,oBAAS,GAHG,mBAGnCG,EAHmC,KAG1BC,EAH0B,KAY1C,OAPAC,qBAAU,WACRtB,EAAKuB,OAAOC,oBAAmB,SAACC,GAC9BN,EAAeM,GACfJ,GAAW,QAEZ,IAECD,EACK,kDAGP,kBAACV,EAAYgB,SAAb,CAAsBC,MAAO,CAACT,gBAC3BJ,I,kCCfDc,EAAW,CACfC,WAAY,QACZC,cAAe,CACb7B,IAASsB,KAAKQ,mBAAmBC,aAMnCC,UAAW,CACTC,cAAe,kBAAM,KAoBVC,eAfD,WAGZ,OAFwBC,qBAAW1B,GAA3BQ,YAGC,kBAAC,IAAD,CAAUmB,GAAG,MAIpB,kBAAC,IAAD,CACET,SAAUA,EACVU,aAAcrC,IAASsB,YCpBdgB,EATF,WACX,OACE,oCACE,oCACA,4BAAQC,QAAS,kBAAMxC,EAAKuB,OAAOkB,YAAnC,c,QCeSC,EAjBM,SAAC,GAA4C,IAA/BC,EAA8B,EAAzCC,UAA8BC,EAAW,6BACxD3B,EAAekB,qBAAW1B,GAA1BQ,YACP,OACE,kBAAC,IAAD,iBACM2B,EADN,CAEEC,OAAU,SAAAC,GAAU,OAChB7B,EACA,kBAACyB,EAAmBI,GAEpB,kBAAC,IAAD,CAAUV,GAAI,gB,MCSTW,MAbf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,CAAcC,OAAK,EAACC,KAAK,IAAIN,UAAWL,IACxC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,SAASN,UAAWO,QCJ5BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASX,OACP,kBAAC,IAAMY,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.99ea1c66.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nconst base = firebase.initializeApp({\n  apiKey: \"AIzaSyDJrmQODORrGuLXZoe2kd3f0sOhPaVqVxk\",\n  authDomain: \"quiz-1896c.firebaseapp.com\",\n  databaseURL: \"https://quiz-1896c.firebaseio.com\",\n  projectId: \"quiz-1896c\",\n  storageBucket: \"quiz-1896c.appspot.com\",\n  messagingSenderId: \"348525174082\",\n  appId: \"1:348525174082:web:5bf0c7c09fa9e4cb5c7cdb\",\n  measurementId: \"G-8VSVJKL7SK\"\n});\n\nexport default base;","import React, {useEffect, useState} from 'react';\nimport base from \"../_firebase.config\";\n\nexport const AuthContext = React.createContext();\n\nexport const AuthProvider = ({children}) => {\n  console.log(children);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [pending, setPenging] = useState(true);\n\n  useEffect(() => {\n    base.auth().onAuthStateChanged((user) => {\n      setCurrentUser(user);\n      setPenging(false);\n    });\n  }, []);\n\n  if (pending)\n    return <>...Loading</>\n\n  return (\n    <AuthContext.Provider value={{currentUser}}>\n      {children}\n    </AuthContext.Provider>\n  );\n}","import React, { useContext } from 'react';\nimport firebase from \"firebase\";\nimport { withRouter, Redirect } from \"react-router\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport base from \"../_firebase.config\";\nimport { AuthContext } from \"../auth/auth\"; \n\nconst uiConfig = {\n  signInFlow: \"popup\",\n  signInOptions: [\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    // firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n    // firebase.auth.TwitterAuthProvider.PROVIDER_ID,\n    // firebase.auth.GithubAuthProvider.PROVIDER_ID,\n    // firebase.auth.EmailAuthProvider.PROVIDER_ID\n  ],\n  callbacks: {\n    signInSuccess: () => false\n  }\n};\n\n\nconst Login = () => {\n  const { currentUser } = useContext(AuthContext);\n\n  if (currentUser) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <StyledFirebaseAuth\n      uiConfig={uiConfig}\n      firebaseAuth={firebase.auth()}\n    />\n  );\n}\n\nexport default withRouter(Login);\n","import React from \"react\";\nimport base from \"../_firebase.config\";\n\nconst Home = () => {\n  return (\n    <>\n      <h1>Home</h1>\n      <button onClick={() => base.auth().signOut()}>Sign out</button>\n    </>\n  );\n};\n\nexport default Home;\n","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"../components/auth/auth\";\n\n\nconst PrivateRoute = ({ component: RouteComponent, ...rest }) => {\n  const {currentUser} = useContext(AuthContext);\n  return (\n    <Route\n      {...rest}\n      render = {routeProps =>\n        !!currentUser ? (\n          <RouteComponent {...routeProps} />\n        ) : (\n          <Redirect to={\"/login\"} />\n        )\n      }\n    />\n  );\n};\n\n\nexport default PrivateRoute;","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { AuthProvider } from \"../components/auth/auth\";\nimport Login from \"../components/login/login\";\nimport Home from \"../components/home/home\";\nimport PrivateRoute from \"../components/PrivateRoute\";\n\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <div>\n          <PrivateRoute exact path=\"/\" component={Home}/>\n          <Route exact path=\"/login\" component={Login} />\n        </div>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}